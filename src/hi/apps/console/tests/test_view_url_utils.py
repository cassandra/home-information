import logging
from unittest.mock import patch

from django.utils import timezone

from hi.apps.alert.alarm import Alarm, AlarmSourceDetails  
from hi.apps.alert.enums import AlarmLevel, AlarmSource
from hi.apps.console.view_url_utils import ViewUrlUtils
from hi.apps.entity.models import Entity, EntityState
from hi.apps.entity.enums import EntityStateType
from hi.apps.security.enums import SecurityLevel
from hi.apps.sense.models import Sensor
from hi.apps.sense.enums import SensorType
from hi.tests.base_test_case import BaseTestCase

logging.disable(logging.CRITICAL)


class TestViewUrlUtils(BaseTestCase):
    """Test ViewUrlUtils with proper database setup."""

    def setUp(self):
        """Set up test data with proper entity/sensor relationships."""
        super().setUp()
        
        # Create an entity (e.g., a camera)
        self.camera_entity = Entity.objects.create(
            name='Front Door Camera',
            entity_type_str='CAMERA'
        )
        
        # Create entity states for the camera
        self.motion_entity_state = EntityState.objects.create(
            entity=self.camera_entity,
            entity_state_type=EntityStateType.MOVEMENT,
            name='Motion Detection'
        )
        
        self.video_stream_entity_state = EntityState.objects.create(
            entity=self.camera_entity,
            entity_state_type=EntityStateType.VIDEO_STREAM,
            name='Video Stream'
        )
        
        # Create sensors
        self.motion_sensor = Sensor.objects.create(
            name='Motion Sensor',
            entity_state=self.motion_entity_state,
            sensor_type_str=str(SensorType.DEFAULT),
            integration_id='zm_motion_1',
            integration_name='zoneminder'
        )
        
        self.video_sensor = Sensor.objects.create(
            name='Video Stream Sensor',
            entity_state=self.video_stream_entity_state,
            sensor_type_str=str(SensorType.DEFAULT),
            integration_id='zm_video_1', 
            integration_name='zoneminder'
        )

    def test_motion_sensor_with_video_stream_generates_url(self):
        """Test that a motion sensor on entity with video stream generates camera URL."""
        # Create alarm with motion sensor
        source_details = AlarmSourceDetails(
            detail_attrs={'location': 'Front Door'},
            image_url=None,
            sensor_id=str(self.motion_sensor.id)
        )
        
        alarm = Alarm(
            alarm_source=AlarmSource.EVENT,
            alarm_type='motion_detection',
            alarm_level=AlarmLevel.WARNING,
            title='Motion detected at Front Door',
            source_details_list=[source_details],
            security_level=SecurityLevel.OFF,
            alarm_lifetime_secs=300,
            timestamp=timezone.now()
        )
        
        view_url = ViewUrlUtils.get_view_url_for_alarm(alarm)
        
        # Should return the actual URL generated by Django's reverse()
        self.assertEqual(view_url, f'/console/sensor/video-stream/{self.motion_sensor.id}')

    def test_video_sensor_generates_url(self):
        """Test that a video stream sensor generates camera URL."""
        source_details = AlarmSourceDetails(
            detail_attrs={'location': 'Front Door'},
            image_url=None,
            sensor_id=str(self.video_sensor.id)
        )
        
        alarm = Alarm(
            alarm_source=AlarmSource.EVENT,
            alarm_type='video_issue',
            alarm_level=AlarmLevel.INFO,
            title='Video stream issue',
            source_details_list=[source_details],
            security_level=SecurityLevel.OFF,
            alarm_lifetime_secs=300,
            timestamp=timezone.now()
        )
        
        view_url = ViewUrlUtils.get_view_url_for_alarm(alarm)
        
        # Should return the actual URL generated by Django's reverse() 
        self.assertEqual(view_url, f'/console/sensor/video-stream/{self.video_sensor.id}')

    def test_sensor_without_video_stream_returns_none(self):
        """Test that sensor on entity without video stream returns None."""
        # Create entity without video stream
        thermostat_entity = Entity.objects.create(
            name='Living Room Thermostat',
            entity_type_str='THERMOSTAT'
        )
        
        temp_entity_state = EntityState.objects.create(
            entity=thermostat_entity,
            entity_state_type=EntityStateType.TEMPERATURE,
            name='Temperature Reading'
        )
        
        temp_sensor = Sensor.objects.create(
            name='Temperature Sensor',
            entity_state=temp_entity_state,
            sensor_type_str=str(SensorType.DEFAULT),
            integration_id='hass_temp_1',
            integration_name='homeassistant'
        )
        
        source_details = AlarmSourceDetails(
            detail_attrs={'location': 'Living Room'},
            image_url=None,
            sensor_id=str(temp_sensor.id)
        )
        
        alarm = Alarm(
            alarm_source=AlarmSource.EVENT,
            alarm_type='temperature_alert',
            alarm_level=AlarmLevel.WARNING,
            title='High temperature',
            source_details_list=[source_details],
            security_level=SecurityLevel.OFF,
            alarm_lifetime_secs=300,
            timestamp=timezone.now()
        )
        
        view_url = ViewUrlUtils.get_view_url_for_alarm(alarm)
        self.assertIsNone(view_url)

    def test_nonexistent_sensor_returns_none(self):
        """Test that non-existent sensor ID returns None."""
        source_details = AlarmSourceDetails(
            detail_attrs={'location': 'Somewhere'},
            image_url=None,
            sensor_id='99999'  # Non-existent sensor
        )
        
        alarm = Alarm(
            alarm_source=AlarmSource.EVENT,
            alarm_type='unknown',
            alarm_level=AlarmLevel.WARNING,
            title='Unknown alert',
            source_details_list=[source_details],
            security_level=SecurityLevel.OFF,
            alarm_lifetime_secs=300,
            timestamp=timezone.now()
        )
        
        view_url = ViewUrlUtils.get_view_url_for_alarm(alarm)
        self.assertIsNone(view_url)

    def test_alarm_without_sensor_id_returns_none(self):
        """Test that alarm without sensor_id returns None."""
        source_details = AlarmSourceDetails(
            detail_attrs={'location': 'Somewhere'},
            image_url=None,
            sensor_id=None
        )
        
        alarm = Alarm(
            alarm_source=AlarmSource.WEATHER,
            alarm_type='tornado_warning',
            alarm_level=AlarmLevel.CRITICAL,
            title='Tornado Warning',
            source_details_list=[source_details],
            security_level=SecurityLevel.OFF,
            alarm_lifetime_secs=1800,
            timestamp=timezone.now()
        )
        
        view_url = ViewUrlUtils.get_view_url_for_alarm(alarm)
        self.assertIsNone(view_url)

    def test_multiple_source_details_uses_first_valid_sensor(self):
        """Test that first valid sensor_id is used when multiple source details exist."""
        # First source detail without sensor_id
        source_details_1 = AlarmSourceDetails(
            detail_attrs={'location': 'Area A'},
            image_url=None,
            sensor_id=None
        )
        
        # Second source detail with sensor_id
        source_details_2 = AlarmSourceDetails(
            detail_attrs={'location': 'Area B'},
            image_url=None,
            sensor_id=str(self.motion_sensor.id)
        )
        
        alarm = Alarm(
            alarm_source=AlarmSource.EVENT,
            alarm_type='motion_detection',
            alarm_level=AlarmLevel.WARNING,
            title='Motion detected',
            source_details_list=[source_details_1, source_details_2],
            security_level=SecurityLevel.OFF,
            alarm_lifetime_secs=300,
            timestamp=timezone.now()
        )
        
        view_url = ViewUrlUtils.get_view_url_for_alarm(alarm)
        
        # Should return the actual URL generated by Django's reverse()
        self.assertEqual(view_url, f'/console/sensor/video-stream/{self.motion_sensor.id}')

    def test_url_generation_exception_handling(self):
        """Test graceful handling of URL generation failures."""
        source_details = AlarmSourceDetails(
            detail_attrs={'location': 'Front Door'},
            image_url=None,
            sensor_id=str(self.motion_sensor.id)
        )
        
        alarm = Alarm(
            alarm_source=AlarmSource.EVENT,
            alarm_type='motion_detection',
            alarm_level=AlarmLevel.WARNING,
            title='Motion detected',
            source_details_list=[source_details],
            security_level=SecurityLevel.OFF,
            alarm_lifetime_secs=300,
            timestamp=timezone.now()
        )
        
        # Test with a broken URL pattern name to trigger exception handling
        with patch('hi.apps.console.view_url_utils.reverse') as mock_reverse:
            mock_reverse.side_effect = Exception("URL pattern not found")
            
            view_url = ViewUrlUtils.get_view_url_for_alarm(alarm)
            
            # Test error handling behavior: should return None on failure
            self.assertIsNone(view_url)